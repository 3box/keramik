Request {
    method: "PATCH",
    uri: "/api/v1/namespaces/test/configmaps/otel-config?&fieldManager=keramik",
    headers: {
        "accept": "application/json",
        "content-type": "application/apply-patch+yaml",
    },
    body: {
      "apiVersion": "v1",
      "kind": "ConfigMap",
      "data": {
        "otel-config.yaml": "\n    receivers:\n      # Push based metrics\n      otlp:\n        protocols:\n          grpc:\n            endpoint: 0.0.0.0:4317\n          http:\n            endpoint: 0.0.0.0:4318\n      # Pull based metrics\n      prometheus:\n        config:\n          scrape_configs:\n            - job_name: \"ipfs-service-endpoints\"\n              kubernetes_sd_configs:\n                - role: pod\n                  namespaces:\n                    own_namespace: True\n              relabel_configs:\n              # Only scrape ipfs containers, port 5001\n                - source_labels: [__meta_kubernetes_pod_container_name]\n                  action: keep\n                  regex: ipfs\n                - source_labels: [__meta_kubernetes_pod_container_port_number]\n                  action: keep\n                  regex: 5001\n              # Set path and add labels\n                - source_labels: [__meta_kubernetes_pod_annotation_prometheus_path]\n                  action: replace\n                  target_label: __metrics_path__\n                  replacement: /debug/metrics/prometheus\n                - source_labels: [__meta_kubernetes_namespace]\n                  action: replace\n                  target_label: kubernetes_namespace\n                - source_labels: [__meta_kubernetes_pod_name]\n                  action: replace\n                  target_label: kubernetes_pod\n                - source_labels: [__meta_kubernetes_pod_container_name]\n                  action: replace\n                  target_label: kubernetes_container\n            - job_name: \"ceramic-service-endpoints\"\n              kubernetes_sd_configs:\n                - role: pod\n                  namespaces:\n                    own_namespace: True\n              relabel_configs:\n              # Only scrape ceramic containers, port 9464\n                - source_labels: [__meta_kubernetes_pod_container_name]\n                  action: keep\n                  regex: ceramic\n                - source_labels: [__meta_kubernetes_pod_container_port_number]\n                  action: keep\n                  regex: 9464\n              # Set path and add labels\n                - source_labels: [__meta_kubernetes_pod_annotation_prometheus_path]\n                  action: replace\n                  target_label: __metrics_path__\n                  replacement: /debug/metrics/prometheus\n                - source_labels: [__meta_kubernetes_namespace]\n                  action: replace\n                  target_label: kubernetes_namespace\n                - source_labels: [__meta_kubernetes_pod_name]\n                  action: replace\n                  target_label: kubernetes_pod\n                - source_labels: [__meta_kubernetes_pod_container_name]\n                  action: replace\n                  target_label: kubernetes_container\n\n    processors:\n      batch:\n\n    exporters:\n      # This is unused but can be easily added for debugging.\n      logging:\n        # can be one of detailed | normal | basic\n        verbosity: detailed\n        # Log all messages, do not sample\n        sampling_initial: 1\n        sampling_thereafter: 1\n      otlp/jaeger:\n        endpoint: jaeger:4317\n        tls:\n          insecure: true\n      prometheus:\n        endpoint: 0.0.0.0:9090\n        # Keep stale metrics around for 1h before dropping\n        # This helps as simulation metrics are stale once the simulation stops.\n        metric_expiration: 1h\n        resource_to_telemetry_conversion:\n          enabled: true\n      datadog:\n        api:\n          site: \"us3.datadoghq.com\"\n          key: \"${env:DD_API_KEY}\"\n      parquet:\n        path: /data/\n      # Grafana Cloud export\n      # TODO: Remove, this work however its not possible to\n      # namespace the metrics from other Grafana metrics which makes\n      # it hard to consume and polutes the normal metrics namespace.\n      #\n      # For now leaving this here as an example of how to enable,\n      # but will rely on local prometheus metrics in the short term.\n      #otlphttp/grafana:\n      #  auth:\n      #    authenticator: basicauth/grafana\n      #  endpoint: https://otlp-gateway-prod-us-central-0.grafana.net/otlp\n\n            #extensions:\n            #  basicauth/grafana:\n            #    client_auth:\n            #      username: \"user\" # replace with Grafana instance id\n            #      password: \"password\" # replace with Grafana API token (via a secret)\n\n    service:\n      #extensions: [basicauth/grafana]\n      pipelines:\n        traces:\n          receivers: [otlp]\n          processors: [batch]\n          exporters: [otlp/jaeger]\n        metrics:\n          receivers: [otlp,prometheus]\n          processors: [batch]\n          exporters: [parquet, prometheus, datadog]\n      # Enable telemetry on the collector itself\n      telemetry:\n        logs:\n          level: info\n        metrics:\n          level: detailed\n          address: 0.0.0.0:8888"
      },
      "metadata": {
        "labels": {
          "managed-by": "keramik"
        },
        "name": "otel-config",
        "ownerReferences": []
      }
    },
}
