---
receivers:
  # Push based metrics
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
  # Pull based metrics
  prometheus/scrape_configs:
    config:
      scrape_configs:
        - job_name: 'kubernetes-service-endpoints'
          scrape_interval: 10s
          scrape_timeout: 1s

          kubernetes_sd_configs:
          - role: pod
            namespaces:
              own_namespace: true
          # Only container ports named `metrics` will be considered valid targets.
          #
          # Setup relabel rules to give meaning to the following k8s annotations:
          #   prometheus/path - URL path of the metrics endpoint
          #
          # Example:
          #   annotations:
          #      prometheus/path: "/api/v0/metrics"
          relabel_configs:
          - source_labels: [__meta_kubernetes_pod_container_port_name]
            action: keep
            regex: "metrics"
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod
          - source_labels: [__meta_kubernetes_pod_container_name]
            action: replace
            target_label: kubernetes_container

processors:
  batch:

exporters:
  # This is unused but can be easily added for debugging.
  logging:
    # can be one of detailed | normal | basic
    verbosity: detailed
    # Log all messages, do not sample
    sampling_initial: 1
    sampling_thereafter: 1
  prometheus/endpoint:
    endpoint: 0.0.0.0:9464
    # Keep stale metrics around for 1h before dropping
    # This helps as simulation metrics are stale once the simulation stops.
    metric_expiration: 1h
    resource_to_telemetry_conversion:
      enabled: true
  # Remote write to prometheus
  prometheusremotewrite:
    endpoint: "http://prometheus:9090/api/v1/write"
    tls:
      insecure: true

service:
  pipelines:
    metrics:
      receivers: [otlp,prometheus/scrape_configs]
      processors: [batch]
      exporters: [prometheus/endpoint,prometheusremotewrite]
  # Enable telemetry on the collector itself
  telemetry:
    logs:
      level: debug
    metrics:
      level: detailed
      address: 0.0.0.0:8888
